/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define U_MOUSE_MOVE_MAX 1400

#undef MOVE_UP
#undef MOVE_DOWN
#undef MOVE_LEFT
#undef MOVE_RIGHT

#define MOVE_UP MOVE_VERT(-U_MOUSE_MOVE_MAX)
#define MOVE_DOWN MOVE_VERT(U_MOUSE_MOVE_MAX)
#define MOVE_LEFT MOVE_HOR(-U_MOUSE_MOVE_MAX)
#define MOVE_RIGHT MOVE_HOR(U_MOUSE_MOVE_MAX)
#define U_MOUSE_SCROLL_MAX 12

#undef SCROLL_UP
#undef SCROLL_DOWN
#undef SCROLL_LEFT
#undef SCROLL_RIGHT

#define SCROLL_UP SCROLL_VERT(U_MOUSE_SCROLL_MAX)
#define SCROLL_DOWN SCROLL_VERT(-U_MOUSE_SCROLL_MAX)
#define SCROLL_LEFT SCROLL_HOR(-U_MOUSE_SCROLL_MAX)
#define SCROLL_RIGHT SCROLL_HOR(U_MOUSE_SCROLL_MAX)

&mmv {
    time-to-max-speed-ms = <250>;
    acceleration-exponent = <1>;
};

&mwh {
    time-to-max-speed-ms = <250>;
    acceleration-exponent = <1>;
};

&nice_view_spi { cs-gpios = <&pro_micro 10 GPIO_ACTIVE_HIGH>; };

/ {
    behaviors {
        skq: sticky_key_quick_release {
            label = "STICKY_KEY_QUICK_RELEASE";
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <2000>;
            quick-release;
            ignore-modifiers;
        };

        gqt: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_escape {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        combo_exclaimation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <2 3>;
        };

        combo_at_sign {
            bindings = <&kp AT_SIGN>;
            key-positions = <14 15 16>;
        };

        combo_hash {
            bindings = <&kp HASH>;
            key-positions = <1 3>;
        };

        combo_dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <1 5>;
        };

        combo_percent {
            bindings = <&kp PERCENT>;
            key-positions = <2 4>;
        };

        combo_ampersand {
            bindings = <&kp AMPS>;
            key-positions = <19 20>;
        };

        combo_caret {
            bindings = <&kp CARET>;
            key-positions = <19 21>;
        };

        combo_asterisk {
            bindings = <&kp ASTRK>;
            key-positions = <21 20>;
        };

        combo_left_parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <8 7>;
        };

        combo_right_parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <9 8>;
        };

        combo_volume_up {
            bindings = <&kp C_VOLUME_UP>;
            key-positions = <27 28>;
        };

        combo_volume_down {
            bindings = <&kp K_VOLUME_DOWN>;
            key-positions = <25 26>;
        };

        combo_mute {
            bindings = <&kp C_MUTE>;
            key-positions = <25 26 27>;
        };

        combo_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <6 7>;
        };

        combo_delete {
            bindings = <&kp DELETE>;
            key-positions = <5 4>;
        };

        combo_underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <29 28>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <17 16>;
        };

        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <30 31>;
        };

        combo_equal {
            bindings = <&kp EQUAL>;
            key-positions = <18 19>;
        };

        combo_media_previous {
            bindings = <&kp C_RW>;
            key-positions = <13 26>;
        };

        combo_Media_Next {
            bindings = <&kp C_FF>;
            key-positions = <27 16>;
        };

        combo_left_control {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <24 36>;
        };

        combo_left_option {
            bindings = <&kp LEFT_ALT>;
            key-positions = <24 38>;
        };

        combo_single_quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <9 10>;
        };

        combo_apostrophe {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <10 20 21>;
        };

        combo_question {
            bindings = <&kp QUESTION>;
            key-positions = <21 20 19>;
        };

        combo_slash {
            bindings = <&kp SLASH>;
            key-positions = <9 10 20>;
        };

        combo_colon {
            bindings = <&kp COLON>;
            key-positions = <33 32 31>;
        };

        combo_semicolon {
            bindings = <&kp SEMI>;
            key-positions = <30 31 32>;
        };

        combo_dot {
            bindings = <&kp DOT>;
            key-positions = <9 8 19>;
        };

        combo_comma {
            bindings = <&kp COMMA>;
            key-positions = <18 7 8>;
        };

        combo_right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <23 22>;
        };

        combo_left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <22 21>;
        };

        combo_backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <10 11>;
        };

        combo_enter_left {
            bindings = <&kp ENTER>;
            key-positions = <2 3 4>;
        };

        combo_enter_right {
            bindings = <&kp ENTER>;
            key-positions = <9 8 7>;
        };

        combo_play {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <26 27>;
        };

        combo_tab_2 {
            bindings = <&kp TAB>;
            key-positions = <15 16>;
        };

        combo_space {
            bindings = <&kp SPACE>;
            key-positions = <1 2 3>;
        };

        combo_space_2 {
            bindings = <&kp SPACE>;
            key-positions = <15 16 17>;
        };

        combo_meme {
            bindings = <&macro_meme>;
            key-positions = <34 30>;
        };

        combo_sad {
            bindings = <&macro_sweat>;
            key-positions = <25 16>;
        };

        combo_thumbs_up {
            bindings = <&macro_thumbs_up>;
            key-positions = <17 25>;
        };

        combo_cheers_benroy {
            bindings = <&macro_cheers_benroy>;
            key-positions = <25 17 3>;
        };

        combo_desktop_right {
            bindings = <&kp RC(RIGHT)>;
            key-positions = <41 35>;
        };

        combo_desktop_left {
            bindings = <&kp RC(LEFT)>;
            key-positions = <41 33>;
        };

        combo_desktop_up {
            bindings = <&kp RC(UP_ARROW)>;
            key-positions = <41 22>;
        };

        combo_mouse_right {
            bindings = <&to 5>;
            key-positions = <18 22>;
        };

        combo_mouse_left {
            bindings = <&to 5>;
            key-positions = <29 25>;
        };

        combo_joy_emote {
            bindings = <&macro_joy_emote>;
            key-positions = <25 15>;
        };

        combo_macro_pathetic {
            bindings = <&macro_patriotic_pathetic>;
            key-positions = <33 30 32>;
        };

        combo_backtick {
            bindings = <&kp GRAVE>;
            key-positions = <3 16 2>;
        };

        combo_right_shift {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <31 32>;
        };

        combo_right_command {
            bindings = <&kp RIGHT_COMMAND>;
            key-positions = <23 41>;
        };

        combo_tilde {
            bindings = <&kp GRAVE>;
            key-positions = <17 4 3>;
        };

        man-in-arena {
            bindings = <&man_in_arena>;
            key-positions = <17 16 15 18 19 20>;
        };
    };

    macros {
        macro_meme: macro_meme {
            compatible = "zmk,behavior-macro";
            label = "MACRO_MEME";
            #binding-cells = <0>;
            bindings = <&kp LS(I) &kp SPACE &kp F &kp E &kp E &kp L &kp SPACE &kp L &kp I &kp K &kp E &kp SPACE &kp W &kp E &kp SPACE &kp H &kp A &kp V &kp E &kp SPACE &kp G &kp O &kp N &kp E &kp SPACE &kp P &kp A &kp S &kp T &kp SPACE &kp S &kp O &kp C &kp I &kp A &kp L &kp SPACE &kp N &kp O &kp R &kp M &kp S &kp SPACE &kp H &kp A &kp H &kp H &kp A &kp A &kp H &kp A &kp H &kp H &kp H &kp ENTER>;
        };

        macro_thumbs_up: macro_thumbs_up {
            compatible = "zmk,behavior-macro";
            label = "MACRO_THUMBS_UP";
            #binding-cells = <0>;
            bindings = <&none &kp COLON &kp T &kp H &kp U &kp M &kp B &kp S>;
        };

        macro_sweat: macro_sweat {
            compatible = "zmk,behavior-macro";
            label = "MACRO_SWEAT";
            #binding-cells = <0>;
            bindings = <&none &kp COLON &kp S &kp W &kp E &kp A &kp T>;
        };

        macro_cheers_benroy: macro_cheers_benroy {
            compatible = "zmk,behavior-macro";
            label = "MACRO_CHEERS_BENROY";
            #binding-cells = <0>;
            bindings = <&none &kp LS(C) &kp H &kp E &kp E &kp R &kp S &kp EXCL &kp RET &kp LS(B) &kp E &kp N &kp R &kp O &kp Y>;
        };

        macro_joy_emote: macro_joy_emote {
            compatible = "zmk,behavior-macro";
            label = "MACRO_JOY_EMOTE";
            #binding-cells = <0>;
            bindings = <&none &kp COLON &kp J &kp O &kp Y>;
        };

        macro_patriotic_pathetic: macro_patriotic_pathetic {
            compatible = "zmk,behavior-macro";
            label = "MACRO_PATRIOTIC_PATHETIC";
            #binding-cells = <0>;
            bindings = <&none &kp LS(N) &kp O &kp T &kp SPACE &kp B &kp E &kp C &kp A &kp U &kp S &kp E &kp SPACE &kp LS(I) &kp SPACE &kp A &kp M &kp SPACE &kp P &kp A &kp T &kp R &kp I &kp O &kp T &kp I &kp C &kp SPACE &kp B &kp U &kp T &kp SPACE &kp B &kp E &kp C &kp A &kp U &kp S &kp E &kp SPACE &kp LS(I) &kp SPACE &kp A &kp M &kp SPACE &kp P &kp A &kp T &kp H &kp E &kp T &kp I &kp C>;
        };

        man_in_arena: man_in_arena {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "MAN_IN_ARENA";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp F14    &gqt LS(LG(NUMBER_4)) Q  &kp W             &gqt LS(LG(NUMBER_2)) E  &kp R             &gqt LS(LG(T)) T  &kp Y  &kp U      &kp I              &kp O     &kp P     &kp F16
&kp F15    &kp A                    &kp S             &kp D                    &gqt SPACE F      &kp G             &kp H  &kp J      &kp K              &kp L     &kp UP    &mo 2
&kp LSHFT  &gqt LEFT_ALT Z          &gqt LS(LG(X)) X  &kp C                    &kp V             &kp B             &kp N  &kp M      &kp RIGHT_COMMAND  &kp LEFT  &kp DOWN  &kp RIGHT
                                                      &mo 1                    &kp LEFT_COMMAND  &kp LEFT_SHIFT    &mo 1  &kp SPACE  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp LS(LG(N4))  &kp N1        &kp N2          &kp N3       &kp N4         &kp N5             &kp N6           &kp N7           &kp N8           &kp N9           &kp N0  &kp BSPC
&kp LEFT_GUI    &kp LEFT      &kp UP          &kp DOWN     &kp RIGHT      &skq LEFT_COMMAND  &trans           &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &trans  &trans
&trans          &kp LA(LEFT)  &skq LA(LCTRL)  &kp LC(TAB)  &kp LA(RIGHT)  &kp LA(LG(V))      &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans  &kp RIGHT_SHIFT
                                              &trans       &trans         &kp LC(TAB)        &kp RET          &kp DOT          &kp KP_NUMBER_0
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp UP    &kp HASH      &kp DLLR      &kp PRCNT  &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &kp LEFT  &kp DOWN  &kp RIGHT     &trans        &trans     &kp MINUS  &kp EQUAL  &kp LBKT         &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans    &trans    &trans        &trans        &mo 4      &kp UNDER  &kp PLUS   &kp LBRC         &kp RBRC  &kp PIPE  &kp TILDE
                               &kp LEFT_ALT  &kp LEFT_GUI  &kp SPACE  &kp RET    &trans     &kp RALT
            >;
        };

        Setting {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &mo 5   &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        Bluetooth {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &bt BT_PRV    &bt BT_NXT    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans
                                    &trans        &trans        &bt BT_CLR    &trans  &trans  &trans
            >;
        };

        Mouse {
            bindings = <
&trans  &trans  &mwh SCROLL_LEFT  &mmv MOVE_UP    &mwh SCROLL_RIGHT  &mwh SCROLL_UP    &mwh SCROLL_UP    &mwh SCROLL_LEFT  &mmv MOVE_UP    &mwh SCROLL_RIGHT  &trans  &trans
&trans  &trans  &mmv MOVE_LEFT    &mmv MOVE_DOWN  &mmv MOVE_RIGHT    &mwh SCROLL_DOWN  &mwh SCROLL_DOWN  &mmv MOVE_LEFT    &mmv MOVE_DOWN  &mmv MOVE_RIGHT    &trans  &trans
&trans  &trans  &trans            &trans          &trans             &trans            &trans            &trans            &trans          &trans             &trans  &trans
                                  &mkp LCLK       &mkp RCLK          &to 0             &to 0             &mkp LCLK         &mkp RCLK
            >;
        };
    };
};
